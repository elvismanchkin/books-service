apiVersion: apps/v1
kind: Deployment
metadata:
  name: reactive-books-service
  labels:
    app: reactive-books-service
spec:
  replicas: 2
  selector:
    matchLabels:
      app: reactive-books-service
  template:
    metadata:
      labels:
        app: reactive-books-service
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: "/prometheus"
        prometheus.io/port: "8080"
    spec:
      containers:
        - name: reactive-books-service
          image: reactive-books-service:0.1.0
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8080
              name: http
          env:
            - name: LOG_FORMAT
              value: "JSON"
            - name: R2DBC_DATASOURCES_DEFAULT_URL
              valueFrom:
                secretKeyRef:
                  name: db-secrets
                  key: db-url
            - name: R2DBC_DATASOURCES_DEFAULT_USERNAME
              valueFrom:
                secretKeyRef:
                  name: db-secrets
                  key: username
            - name: R2DBC_DATASOURCES_DEFAULT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: db-secrets
                  key: password
            - name: RABBITMQ_URI
              valueFrom:
                secretKeyRef:
                  name: rabbitmq-secrets
                  key: uri
            - name: MICRONAUT_METRICS_EXPORT_PROMETHEUS_ENABLED
              value: "true"
            - name: MICRONAUT_TRACING_ENABLED
              value: "true"
            - name: JAVA_TOOL_OPTIONS
              value: "-XX:MaxRAMPercentage=75.0"
          resources:
            limits:
              cpu: "1"
              memory: "1Gi"
            requests:
              cpu: "500m"
              memory: "512Mi"
          readinessProbe:
            httpGet:
              path: /api/probes/readiness
              port: 8080
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 3
          livenessProbe:
            httpGet:
              path: /api/probes/liveness
              port: 8080
            initialDelaySeconds: 60
            periodSeconds: 30
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 3
---
apiVersion: v1
kind: Service
metadata:
  name: reactive-books-service
  labels:
    app: reactive-books-service
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 8080
      protocol: TCP
      name: http
  selector:
    app: reactive-books-service
---
apiVersion: v1
kind: Secret
metadata:
  name: db-secrets
type: Opaque
stringData:
  db-url: "r2dbc:postgresql://postgres:5432/books"
  username: "books"
  password: "passw0rd"
---
apiVersion: v1
kind: Secret
metadata:
  name: rabbitmq-secrets
type: Opaque
stringData:
  uri: "amqp://books:books@rabbitmq:5672/books"